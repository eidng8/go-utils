// Code generated by mockery v2.50.0. DO NOT EDIT.

package utils

import (
	io "io"

	jsoniter "github.com/json-iterator/go"
	mock "github.com/stretchr/testify/mock"

	reflect2 "github.com/modern-go/reflect2"
)

// MockAPI is an autogenerated mock type for the API type
type MockAPI struct {
	mock.Mock
}

type MockAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPI) EXPECT() *MockAPI_Expecter {
	return &MockAPI_Expecter{mock: &_m.Mock}
}

// BorrowIterator provides a mock function with given fields: data
func (_m *MockAPI) BorrowIterator(data []byte) *jsoniter.Iterator {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for BorrowIterator")
	}

	var r0 *jsoniter.Iterator
	if rf, ok := ret.Get(0).(func([]byte) *jsoniter.Iterator); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jsoniter.Iterator)
		}
	}

	return r0
}

// MockAPI_BorrowIterator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BorrowIterator'
type MockAPI_BorrowIterator_Call struct {
	*mock.Call
}

// BorrowIterator is a helper method to define mock.On call
//   - data []byte
func (_e *MockAPI_Expecter) BorrowIterator(data interface{}) *MockAPI_BorrowIterator_Call {
	return &MockAPI_BorrowIterator_Call{Call: _e.mock.On("BorrowIterator", data)}
}

func (_c *MockAPI_BorrowIterator_Call) Run(run func(data []byte)) *MockAPI_BorrowIterator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockAPI_BorrowIterator_Call) Return(_a0 *jsoniter.Iterator) *MockAPI_BorrowIterator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_BorrowIterator_Call) RunAndReturn(run func([]byte) *jsoniter.Iterator) *MockAPI_BorrowIterator_Call {
	_c.Call.Return(run)
	return _c
}

// BorrowStream provides a mock function with given fields: writer
func (_m *MockAPI) BorrowStream(writer io.Writer) *jsoniter.Stream {
	ret := _m.Called(writer)

	if len(ret) == 0 {
		panic("no return value specified for BorrowStream")
	}

	var r0 *jsoniter.Stream
	if rf, ok := ret.Get(0).(func(io.Writer) *jsoniter.Stream); ok {
		r0 = rf(writer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jsoniter.Stream)
		}
	}

	return r0
}

// MockAPI_BorrowStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BorrowStream'
type MockAPI_BorrowStream_Call struct {
	*mock.Call
}

// BorrowStream is a helper method to define mock.On call
//   - writer io.Writer
func (_e *MockAPI_Expecter) BorrowStream(writer interface{}) *MockAPI_BorrowStream_Call {
	return &MockAPI_BorrowStream_Call{Call: _e.mock.On("BorrowStream", writer)}
}

func (_c *MockAPI_BorrowStream_Call) Run(run func(writer io.Writer)) *MockAPI_BorrowStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockAPI_BorrowStream_Call) Return(_a0 *jsoniter.Stream) *MockAPI_BorrowStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_BorrowStream_Call) RunAndReturn(run func(io.Writer) *jsoniter.Stream) *MockAPI_BorrowStream_Call {
	_c.Call.Return(run)
	return _c
}

// DecoderOf provides a mock function with given fields: typ
func (_m *MockAPI) DecoderOf(typ reflect2.Type) jsoniter.ValDecoder {
	ret := _m.Called(typ)

	if len(ret) == 0 {
		panic("no return value specified for DecoderOf")
	}

	var r0 jsoniter.ValDecoder
	if rf, ok := ret.Get(0).(func(reflect2.Type) jsoniter.ValDecoder); ok {
		r0 = rf(typ)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jsoniter.ValDecoder)
		}
	}

	return r0
}

// MockAPI_DecoderOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecoderOf'
type MockAPI_DecoderOf_Call struct {
	*mock.Call
}

// DecoderOf is a helper method to define mock.On call
//   - typ reflect2.Type
func (_e *MockAPI_Expecter) DecoderOf(typ interface{}) *MockAPI_DecoderOf_Call {
	return &MockAPI_DecoderOf_Call{Call: _e.mock.On("DecoderOf", typ)}
}

func (_c *MockAPI_DecoderOf_Call) Run(run func(typ reflect2.Type)) *MockAPI_DecoderOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect2.Type))
	})
	return _c
}

func (_c *MockAPI_DecoderOf_Call) Return(_a0 jsoniter.ValDecoder) *MockAPI_DecoderOf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_DecoderOf_Call) RunAndReturn(run func(reflect2.Type) jsoniter.ValDecoder) *MockAPI_DecoderOf_Call {
	_c.Call.Return(run)
	return _c
}

// EncoderOf provides a mock function with given fields: typ
func (_m *MockAPI) EncoderOf(typ reflect2.Type) jsoniter.ValEncoder {
	ret := _m.Called(typ)

	if len(ret) == 0 {
		panic("no return value specified for EncoderOf")
	}

	var r0 jsoniter.ValEncoder
	if rf, ok := ret.Get(0).(func(reflect2.Type) jsoniter.ValEncoder); ok {
		r0 = rf(typ)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jsoniter.ValEncoder)
		}
	}

	return r0
}

// MockAPI_EncoderOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncoderOf'
type MockAPI_EncoderOf_Call struct {
	*mock.Call
}

// EncoderOf is a helper method to define mock.On call
//   - typ reflect2.Type
func (_e *MockAPI_Expecter) EncoderOf(typ interface{}) *MockAPI_EncoderOf_Call {
	return &MockAPI_EncoderOf_Call{Call: _e.mock.On("EncoderOf", typ)}
}

func (_c *MockAPI_EncoderOf_Call) Run(run func(typ reflect2.Type)) *MockAPI_EncoderOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect2.Type))
	})
	return _c
}

func (_c *MockAPI_EncoderOf_Call) Return(_a0 jsoniter.ValEncoder) *MockAPI_EncoderOf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_EncoderOf_Call) RunAndReturn(run func(reflect2.Type) jsoniter.ValEncoder) *MockAPI_EncoderOf_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: data, path
func (_m *MockAPI) Get(data []byte, path ...interface{}) jsoniter.Any {
	var _ca []interface{}
	_ca = append(_ca, data)
	_ca = append(_ca, path...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 jsoniter.Any
	if rf, ok := ret.Get(0).(func([]byte, ...interface{}) jsoniter.Any); ok {
		r0 = rf(data, path...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jsoniter.Any)
		}
	}

	return r0
}

// MockAPI_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAPI_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - data []byte
//   - path ...interface{}
func (_e *MockAPI_Expecter) Get(data interface{}, path ...interface{}) *MockAPI_Get_Call {
	return &MockAPI_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{data}, path...)...)}
}

func (_c *MockAPI_Get_Call) Run(run func(data []byte, path ...interface{})) *MockAPI_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].([]byte), variadicArgs...)
	})
	return _c
}

func (_c *MockAPI_Get_Call) Return(_a0 jsoniter.Any) *MockAPI_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_Get_Call) RunAndReturn(run func([]byte, ...interface{}) jsoniter.Any) *MockAPI_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Marshal provides a mock function with given fields: v
func (_m *MockAPI) Marshal(v interface{}) ([]byte, error) {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Marshal")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]byte, error)); ok {
		return rf(v)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_Marshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Marshal'
type MockAPI_Marshal_Call struct {
	*mock.Call
}

// Marshal is a helper method to define mock.On call
//   - v interface{}
func (_e *MockAPI_Expecter) Marshal(v interface{}) *MockAPI_Marshal_Call {
	return &MockAPI_Marshal_Call{Call: _e.mock.On("Marshal", v)}
}

func (_c *MockAPI_Marshal_Call) Run(run func(v interface{})) *MockAPI_Marshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockAPI_Marshal_Call) Return(_a0 []byte, _a1 error) *MockAPI_Marshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_Marshal_Call) RunAndReturn(run func(interface{}) ([]byte, error)) *MockAPI_Marshal_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalIndent provides a mock function with given fields: v, prefix, indent
func (_m *MockAPI) MarshalIndent(v interface{}, prefix string, indent string) ([]byte, error) {
	ret := _m.Called(v, prefix, indent)

	if len(ret) == 0 {
		panic("no return value specified for MarshalIndent")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, string) ([]byte, error)); ok {
		return rf(v, prefix, indent)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, string) []byte); ok {
		r0 = rf(v, prefix, indent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, string) error); ok {
		r1 = rf(v, prefix, indent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_MarshalIndent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalIndent'
type MockAPI_MarshalIndent_Call struct {
	*mock.Call
}

// MarshalIndent is a helper method to define mock.On call
//   - v interface{}
//   - prefix string
//   - indent string
func (_e *MockAPI_Expecter) MarshalIndent(v interface{}, prefix interface{}, indent interface{}) *MockAPI_MarshalIndent_Call {
	return &MockAPI_MarshalIndent_Call{Call: _e.mock.On("MarshalIndent", v, prefix, indent)}
}

func (_c *MockAPI_MarshalIndent_Call) Run(run func(v interface{}, prefix string, indent string)) *MockAPI_MarshalIndent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAPI_MarshalIndent_Call) Return(_a0 []byte, _a1 error) *MockAPI_MarshalIndent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_MarshalIndent_Call) RunAndReturn(run func(interface{}, string, string) ([]byte, error)) *MockAPI_MarshalIndent_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalToString provides a mock function with given fields: v
func (_m *MockAPI) MarshalToString(v interface{}) (string, error) {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for MarshalToString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (string, error)); ok {
		return rf(v)
	}
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPI_MarshalToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalToString'
type MockAPI_MarshalToString_Call struct {
	*mock.Call
}

// MarshalToString is a helper method to define mock.On call
//   - v interface{}
func (_e *MockAPI_Expecter) MarshalToString(v interface{}) *MockAPI_MarshalToString_Call {
	return &MockAPI_MarshalToString_Call{Call: _e.mock.On("MarshalToString", v)}
}

func (_c *MockAPI_MarshalToString_Call) Run(run func(v interface{})) *MockAPI_MarshalToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockAPI_MarshalToString_Call) Return(_a0 string, _a1 error) *MockAPI_MarshalToString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPI_MarshalToString_Call) RunAndReturn(run func(interface{}) (string, error)) *MockAPI_MarshalToString_Call {
	_c.Call.Return(run)
	return _c
}

// NewDecoder provides a mock function with given fields: reader
func (_m *MockAPI) NewDecoder(reader io.Reader) *jsoniter.Decoder {
	ret := _m.Called(reader)

	if len(ret) == 0 {
		panic("no return value specified for NewDecoder")
	}

	var r0 *jsoniter.Decoder
	if rf, ok := ret.Get(0).(func(io.Reader) *jsoniter.Decoder); ok {
		r0 = rf(reader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jsoniter.Decoder)
		}
	}

	return r0
}

// MockAPI_NewDecoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDecoder'
type MockAPI_NewDecoder_Call struct {
	*mock.Call
}

// NewDecoder is a helper method to define mock.On call
//   - reader io.Reader
func (_e *MockAPI_Expecter) NewDecoder(reader interface{}) *MockAPI_NewDecoder_Call {
	return &MockAPI_NewDecoder_Call{Call: _e.mock.On("NewDecoder", reader)}
}

func (_c *MockAPI_NewDecoder_Call) Run(run func(reader io.Reader)) *MockAPI_NewDecoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockAPI_NewDecoder_Call) Return(_a0 *jsoniter.Decoder) *MockAPI_NewDecoder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_NewDecoder_Call) RunAndReturn(run func(io.Reader) *jsoniter.Decoder) *MockAPI_NewDecoder_Call {
	_c.Call.Return(run)
	return _c
}

// NewEncoder provides a mock function with given fields: writer
func (_m *MockAPI) NewEncoder(writer io.Writer) *jsoniter.Encoder {
	ret := _m.Called(writer)

	if len(ret) == 0 {
		panic("no return value specified for NewEncoder")
	}

	var r0 *jsoniter.Encoder
	if rf, ok := ret.Get(0).(func(io.Writer) *jsoniter.Encoder); ok {
		r0 = rf(writer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jsoniter.Encoder)
		}
	}

	return r0
}

// MockAPI_NewEncoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewEncoder'
type MockAPI_NewEncoder_Call struct {
	*mock.Call
}

// NewEncoder is a helper method to define mock.On call
//   - writer io.Writer
func (_e *MockAPI_Expecter) NewEncoder(writer interface{}) *MockAPI_NewEncoder_Call {
	return &MockAPI_NewEncoder_Call{Call: _e.mock.On("NewEncoder", writer)}
}

func (_c *MockAPI_NewEncoder_Call) Run(run func(writer io.Writer)) *MockAPI_NewEncoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockAPI_NewEncoder_Call) Return(_a0 *jsoniter.Encoder) *MockAPI_NewEncoder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_NewEncoder_Call) RunAndReturn(run func(io.Writer) *jsoniter.Encoder) *MockAPI_NewEncoder_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterExtension provides a mock function with given fields: extension
func (_m *MockAPI) RegisterExtension(extension jsoniter.Extension) {
	_m.Called(extension)
}

// MockAPI_RegisterExtension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterExtension'
type MockAPI_RegisterExtension_Call struct {
	*mock.Call
}

// RegisterExtension is a helper method to define mock.On call
//   - extension jsoniter.Extension
func (_e *MockAPI_Expecter) RegisterExtension(extension interface{}) *MockAPI_RegisterExtension_Call {
	return &MockAPI_RegisterExtension_Call{Call: _e.mock.On("RegisterExtension", extension)}
}

func (_c *MockAPI_RegisterExtension_Call) Run(run func(extension jsoniter.Extension)) *MockAPI_RegisterExtension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jsoniter.Extension))
	})
	return _c
}

func (_c *MockAPI_RegisterExtension_Call) Return() *MockAPI_RegisterExtension_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAPI_RegisterExtension_Call) RunAndReturn(run func(jsoniter.Extension)) *MockAPI_RegisterExtension_Call {
	_c.Run(run)
	return _c
}

// ReturnIterator provides a mock function with given fields: iter
func (_m *MockAPI) ReturnIterator(iter *jsoniter.Iterator) {
	_m.Called(iter)
}

// MockAPI_ReturnIterator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnIterator'
type MockAPI_ReturnIterator_Call struct {
	*mock.Call
}

// ReturnIterator is a helper method to define mock.On call
//   - iter *jsoniter.Iterator
func (_e *MockAPI_Expecter) ReturnIterator(iter interface{}) *MockAPI_ReturnIterator_Call {
	return &MockAPI_ReturnIterator_Call{Call: _e.mock.On("ReturnIterator", iter)}
}

func (_c *MockAPI_ReturnIterator_Call) Run(run func(iter *jsoniter.Iterator)) *MockAPI_ReturnIterator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*jsoniter.Iterator))
	})
	return _c
}

func (_c *MockAPI_ReturnIterator_Call) Return() *MockAPI_ReturnIterator_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAPI_ReturnIterator_Call) RunAndReturn(run func(*jsoniter.Iterator)) *MockAPI_ReturnIterator_Call {
	_c.Run(run)
	return _c
}

// ReturnStream provides a mock function with given fields: stream
func (_m *MockAPI) ReturnStream(stream *jsoniter.Stream) {
	_m.Called(stream)
}

// MockAPI_ReturnStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnStream'
type MockAPI_ReturnStream_Call struct {
	*mock.Call
}

// ReturnStream is a helper method to define mock.On call
//   - stream *jsoniter.Stream
func (_e *MockAPI_Expecter) ReturnStream(stream interface{}) *MockAPI_ReturnStream_Call {
	return &MockAPI_ReturnStream_Call{Call: _e.mock.On("ReturnStream", stream)}
}

func (_c *MockAPI_ReturnStream_Call) Run(run func(stream *jsoniter.Stream)) *MockAPI_ReturnStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*jsoniter.Stream))
	})
	return _c
}

func (_c *MockAPI_ReturnStream_Call) Return() *MockAPI_ReturnStream_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAPI_ReturnStream_Call) RunAndReturn(run func(*jsoniter.Stream)) *MockAPI_ReturnStream_Call {
	_c.Run(run)
	return _c
}

// Unmarshal provides a mock function with given fields: data, v
func (_m *MockAPI) Unmarshal(data []byte, v interface{}) error {
	ret := _m.Called(data, v)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}) error); ok {
		r0 = rf(data, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPI_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type MockAPI_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - data []byte
//   - v interface{}
func (_e *MockAPI_Expecter) Unmarshal(data interface{}, v interface{}) *MockAPI_Unmarshal_Call {
	return &MockAPI_Unmarshal_Call{Call: _e.mock.On("Unmarshal", data, v)}
}

func (_c *MockAPI_Unmarshal_Call) Run(run func(data []byte, v interface{})) *MockAPI_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(interface{}))
	})
	return _c
}

func (_c *MockAPI_Unmarshal_Call) Return(_a0 error) *MockAPI_Unmarshal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_Unmarshal_Call) RunAndReturn(run func([]byte, interface{}) error) *MockAPI_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalFromString provides a mock function with given fields: str, v
func (_m *MockAPI) UnmarshalFromString(str string, v interface{}) error {
	ret := _m.Called(str, v)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalFromString")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(str, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPI_UnmarshalFromString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalFromString'
type MockAPI_UnmarshalFromString_Call struct {
	*mock.Call
}

// UnmarshalFromString is a helper method to define mock.On call
//   - str string
//   - v interface{}
func (_e *MockAPI_Expecter) UnmarshalFromString(str interface{}, v interface{}) *MockAPI_UnmarshalFromString_Call {
	return &MockAPI_UnmarshalFromString_Call{Call: _e.mock.On("UnmarshalFromString", str, v)}
}

func (_c *MockAPI_UnmarshalFromString_Call) Run(run func(str string, v interface{})) *MockAPI_UnmarshalFromString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockAPI_UnmarshalFromString_Call) Return(_a0 error) *MockAPI_UnmarshalFromString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_UnmarshalFromString_Call) RunAndReturn(run func(string, interface{}) error) *MockAPI_UnmarshalFromString_Call {
	_c.Call.Return(run)
	return _c
}

// Valid provides a mock function with given fields: data
func (_m *MockAPI) Valid(data []byte) bool {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Valid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAPI_Valid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Valid'
type MockAPI_Valid_Call struct {
	*mock.Call
}

// Valid is a helper method to define mock.On call
//   - data []byte
func (_e *MockAPI_Expecter) Valid(data interface{}) *MockAPI_Valid_Call {
	return &MockAPI_Valid_Call{Call: _e.mock.On("Valid", data)}
}

func (_c *MockAPI_Valid_Call) Run(run func(data []byte)) *MockAPI_Valid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockAPI_Valid_Call) Return(_a0 bool) *MockAPI_Valid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPI_Valid_Call) RunAndReturn(run func([]byte) bool) *MockAPI_Valid_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAPI creates a new instance of MockAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPI {
	mock := &MockAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
